05_Log4j.txt

 # Log4j
 
  - 로그를 남기는 기능들이 구현되어 있는 라이브러리
  - sysout보다 훨씬 체계적인 방식으로 로그를 남길 수 있다
  - 각 로그마다 등급을 설정하고 일정 등급 이상의 로그만 보도록 설정할 수 있다
  
 # Logger
  
  - 로그를 수집하는 객체
  - 해당 클래스에서 발생하는 로그만을 수집하여 Appender로 보낸다
  
 # Appender
 
  - 수집된 로그들을 출력하는 장소
  - 파일, 콘솔, DB 등으로 발생한 로그들을 출력할 수 있다
 
 # Layout
 
  - 로그를 어떤 모양으로 기록할지에 대한 설정 객체
  
 # Log4j 보안 이슈
 
  - 기존의 log4j에 보안 이슈가 있어서 log4j-core(log4j2)에서만 해결이 된 상태
 
 # Log4j logging level
  
  - OFF		: 모든 등급의 로그를 끔
  - FATAL	: 아주 심각한 로그를 작성할 때 사용하는 등급 (아주 심각한 오류만 출력됨)
  - ERROR	: 심각한 로그를 작성할 때 사용하는 등급 (심각 이상의 로그가 모두 출력됨)
  - WARN	: 경고 동급의 로그를 작성할 때 사용하는 등급 (경고 이상의 로그가 모두 출력됨)
  - INFO	: 정보 등급의 로그를 작성할 때 사용하는 등급 (정보 이상의 로그가 모두 출력됨)
  - DEBUG	: 디버깅 등급의 로그를 작성할 때 사용하는 등급 (디버깅 이상의 로그가 모두 출력됨)
  - TRACE	: 추적 단계 등급의 로그를 작성할 때 사용하는 등급 (모든 단계 로그가 모두 출력됨)
  - ALL		: 모든 단계 로그를 모두 출력함
  
  	<!-- Application Loggers -->
	<logger name="com.ezen.springmvc">
		<level value="debug" />
	</logger>
	
	=> level value를 바꿔서 출력되는 로그 레벨 단계를 조절할 수 있다
  
  
 # File Appender 추가해보기
 
 	<!-- File Appender 선언 -->
	<appender name="logfile" class="org.apache.log4j.FileAppender">
		<param name="file" value="/log/logfile.txt" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>	
	
	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ="console" />
		<appender-ref ="logfile" />
		<appender-ref ="logfile_html" />
	</root>
	
 # 다른 레이아웃 사용해보기 (HTML 레이아웃)	
	
	<!-- File Appender2 (html layout) -->
	<appender name="logfile_html" class="org.apache.log4j.FileAppender">
		<param name="file" value="/log/logfile_html.html" />
		<layout class="org.apache.log4j.HTMLLayout" />
	</appender>	
	
	
	
  
  
  
  









